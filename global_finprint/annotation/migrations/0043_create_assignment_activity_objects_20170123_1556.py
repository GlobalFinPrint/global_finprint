# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2017-01-23 15:56
from __future__ import unicode_literals

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('annotation', '0042_auto_20170116_2103'),
    ]

    operations = [
        migrations.RunSQL('''
            -- create activity audit table and trigger

            ------------ seq
            CREATE SEQUENCE public.annotation_activity_audit_id_seq
              INCREMENT 1
              MINVALUE 1
              MAXVALUE 9223372036854775807
              START 1
              CACHE 1;

            ALTER TABLE public.annotation_activity_audit_id_seq
              OWNER TO finprint;

            ------------ table
            CREATE TABLE public.annotation_activity_audit (
              id INTEGER PRIMARY KEY NOT NULL DEFAULT nextval('annotation_activity_audit_id_seq'::regclass),
              activity_datetime TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
              assingment_id INTEGER NOT NULL,
              status_id INTEGER NOT NULL DEFAULT 1,
              progress INTEGER NOT NULL DEFAULT 0,
              progress_delta INTEGER NOT NULL DEFAULT 0,
              activity_change CHAR(1) NOT NULL,
              -- note:  no foreign key for assingment_id since we record deletes as well
              FOREIGN KEY (status_id) REFERENCES public.annotation_annotationstate (id)
                MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION
            );
            CREATE INDEX annotation_assignment_activity_datetime ON annotation_activity_audit USING BTREE (activity_datetime);
            CREATE INDEX annotation_assignment_assingment_id ON annotation_activity_audit USING BTREE (assingment_id);
            CREATE INDEX annotation_assignment_status_id ON annotation_activity_audit USING BTREE (status_id);

            ALTER TABLE public.annotation_activity_audit
              OWNER TO finprint;

            ----------- function
            CREATE OR REPLACE FUNCTION process_annotation_activity() RETURNS TRIGGER
            AS
            $$
                BEGIN
                    --
                    -- insert a row into annotation_activity_audit for every change in annotation_assignment
                    --
                    IF (TG_OP = 'DELETE') THEN
                        INSERT INTO annotation_activity_audit
                          (
                            assingment_id,
                            status_id,
                            progress,
                            activity_change
                          )
                          SELECT
                            OLD.id,
                            OLD.status_id,
                            OLD.progress,
                            'D';
                        RETURN NEW;
                    ELSIF (TG_OP = 'UPDATE') THEN
                        INSERT INTO annotation_activity_audit
                          (
                            assingment_id,
                            status_id,
                            progress,
                            progress_delta,
                            activity_change
                          )
                          SELECT
                            NEW.id,
                            NEW.status_id,
                            NEW.progress,
                            NEW.progress - OLD.progress,
                            'U';
                        RETURN NEW;
                    ELSIF (TG_OP = 'INSERT') THEN
                        INSERT INTO annotation_activity_audit
                          (
                            assingment_id,
                            status_id,
                            progress,
                            activity_change
                          )
                          SELECT
                            NEW.id,
                            NEW.status_id,
                            NEW.progress,
                            'I';
                        RETURN NEW;
                    END IF;
                    RETURN NULL; -- result is ignored since this is an AFTER trigger
                END;
            $$
            LANGUAGE plpgsql;

            ALTER FUNCTION process_annotation_activity()
              OWNER TO finprint;

            ---------------- trig
            CREATE TRIGGER annotation_activity_audit_trig
            AFTER INSERT OR UPDATE OR DELETE ON annotation_assignment
                FOR EACH ROW EXECUTE PROCEDURE process_annotation_activity();
        '''),
    ]
